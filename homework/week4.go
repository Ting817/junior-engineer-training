package homework

// 作业----1：用本地缓存来替换 Redis
// 现在因为你不想连 Redis，所以你打算提供一个基于本地缓存实现的 cache.CodeCache。
//
// 你需要做几件事：
//
// 定义一个 CodeCache 接口，将现在的 CodeCache 改名为 CodeRedisCache。
// 提供一个基于本地缓存的 CodeCache 实现。你可以自主决定用什么本地缓存，在这个过程注意体会技术选型要考虑的点。
// 保证单机并发安全，也就是你可以假定这个实现只用在开发环境，或者单机环境下。

// 作业----2：测试前端接口 LoginJWT 或者 LoginSMS
// 注意：
//
// 你要测试的是 LoginJWT 或者 LoginSMS 本身，所以你要摆脱对 Service 的依赖，使用 mock 生成的代码。
// 你要覆盖所有的分支。
// 因为在 LoginSMS 里面，返回的响应是 Result 序列化后的 JSON 串，所以你要考虑怎么校验响应数据。
// LoginJWT 和 LoginSMS 任意挑一个。

// 作业----3：同步转异步
// 设计一个新的容错机制，同步转异步的容错机制。当满足以下两个条件中的任何一个时，将请求转储到数据库，后续再另外启动一个 goroutine 异步发送出去。
//
// 触发了限流。
// 判定服务商已经崩溃。
// 要求：
//
// 如何判定服务商已经崩溃，不允许使用课程上的判断机制，你需要设计一个新的判断机制，并且解释这种判定机制的决策理由。
// 控制异步重试次数，转储到数据库之后，可以重试 N 次，重试间隔你可以自由决策。
// 不允许写死任何参数，即用户必须可以控制控制参数。
// 保持面向接口和依赖注入风格。
// 写明这种容错机制适合什么场景，并且有什么优缺点。
// 针对提出的缺点，写出后续的改进方案。
// 提供单元测试。
// 设计方案的时候，不允许问老师、助教。即方案肯定得你自己设计，包括优缺点分析、改进方向必须独立完成。
